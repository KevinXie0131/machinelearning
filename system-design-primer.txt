expected read to write ratio
requests per second

线性一致性(Linearizability) --> 顺序一致性(Sequential consistency) --> 因果一致性(Casual consistency) --> 最终一致性(Eventual consistency)

aim for maximal throughput with acceptable latency

Strong consistency (replicated synchronously) --> Eventual consistency (replicated asynchronously) --> Weak consistency

two complementary patterns to support high availability:
    fail-over
        Active-passive / master-slave
        Active-active / master-master
    replication
        Master-slave
        Master-master

commodity machines
Read replicas / Data federation (or functional partitioning) splits up databases by function / Object storage
get bogged down / greater replication lag
results in more cache hits due to improved cache locality
write in parallel, increasing throughput

Sharding / Common ways to shard a table of users is either through the user's last name initial or the user's geographic location / Re-balancing adds additional complexity
