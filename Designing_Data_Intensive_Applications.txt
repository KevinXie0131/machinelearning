Scalability / Fault tolerance / High availability / Latency

Shared-Nothing Architectures (horizontal scaling / scaling out)
node / multiple geographic regions

Replication - redundancy (multiple copies of the same data on different nodes)
reduce latency / increase availability / increase read throughput
single-leader / multi-leader / leaderless replication
synchronous / asynchronous / semi-synchronous replication - durability / consensus

eventual consistency
read-your-writes / mono‐tonic reads guarantees

replica - leader-based replication - active/passive / master–slave replication
leader (master / primary)
followers (read replicas / slaves / secondaries / hot standbys) - replication log or change stream

Setting Up New Followers / downtime / snapshot / caught up
go down / high availability
Follower failure: Catch-up recovery

Leader failure: Failover
1. Determining that the leader has failed / timeout
2. Choosing a new leader / election / elected controller node / consensus
3. Reconfiguring the system to use the new leader / Request Routing

Discarding writes /  lagged behind / be disclosed to / split brain / resolving conflicts / temporary load spike / network glitch

Implementation of Replication Logs
Statement-based replication / nondeterministic function / auto-incrementing column
Write-ahead log (WAL) shipping
Logical (row-based) log replication
Trigger-based replication / triggers & stored procedures

Problems with Replication Lag / eventual consistency

Reading Your Own Writes / stale replica / read-after-write consistency / read-your-writes consistency / logical timestamp
Monotonic Reads / moving backward in time / little/greater lag / fresh/stale replica / anomaly
Consistent Prefix Reads / replication lag anomalies concerns violation of causality / a sequence of writes happens in a certain order / written to the same partition

Solutions for Replication Lag / transactions abandoned

Multi-Leader Replication (master–master / active/active replication)) / across multiple datacenters /  single-leader based replication
Performance / Tolerance of datacenter outages / Tolerance of network problems
conflict resolution / auto-incrementing keys / triggers / integrity constraints
Clients with offline operation /  synced with  Collaborative editing / Real-time collaborative editing
Handling Write Conflicts / committed changes / released the lock / Conflict avoidance
Converging toward a consistent state / unique ID (timestamp, long random number, UUID, hash) / last write wins (LWW)
Custom conflict resolution logic / On write / On read
replication topology / all-to-all / circular / star

version vectors / conflict detection

Leaderless Replication (Clients send each write to several nodes, and read from several nodes in parallel in order to detect and correct nodes with stale data.)
Dynamo-style / coordinator / A quorum write, quorum read, and read repair after a node outage / read requests are also sent to several nodes in parallel
stale (outdated)
Read repair / Anti-entropy process
Quorums for reading and writing / w + r > n /  w = r = (n + 1) / 2 (rounded up)
Limitations of Quorum Consistency / clock skew
Monitoring staleness / tolerate stale reads / replication lag / measure replica staleness
Sloppy Quorums and Hinted Handoff
Cross-datacenter replication

Detecting Concurrent Writes / Last write wins (discarding concurrent writes) / order is undefined / achieve eventual convergence
The “happens-before” relationship and concurrency / B is causally dependent on A / causal dependencies between / get overwritten eventually
Merging concurrently written values / Merging sibling values / deletion marker is known as tombstone
Version vectors (also called a vector clock)
------------------------------------------------------------------------------------------------------------------------

Partitioning - sharding
scalability (Different partitions can be placed on different nodes)
re-balancing / route requests to

Combining replication and partitioning: each node acts as leader for some partitions and follower for other partitions.
Partitioning of Key-Value Data / read & write throughput
skewed / hot spot

Partitioning by Key Range (partition boundaries need to adapt to the data to distribute the data evenly) / lead to hot spots / prefix each timestamp
Partitioning by Hash of Key (hash function to determine the partition for a given key) / MD5 / consistent hashing / hash partitioning (a particular approach to re-balancing)
lose the ability to do efficient range queries / sort order is lost
compound primary key / concatenated index for sorting the data

Skewed Workloads and Relieving Hot Spots

Partitioning and Secondary Indexes
Partitioning Secondary Indexes by Document / local index / document-partitioned / scatter/gather
Partitioning Secondary Indexes by Term / global index / term-partitioned

Re-balancing Partitions
Strategies for Re-balancing
hash mod N (not do it) / Fixed number of partitions / Dynamic partitioning (pre-splitting) / Partitioning proportionally to nodes

cascading failure / have a human in the loop

Request Routing / service discovery / round-robin load balancer / routing tier / partition-aware load balancer / achieving consensus in a distributed system
separate / external coordination service such as ZooKeeper to keep track of this cluster metadata
Each node registers itself in ZooKeeper, and ZooKeeper maintains the authoritative mapping of partitions to nodes
subscribe to this information in ZooKeeper.
When a node is added or removed, ZooKeeper notifies the routing tier so that it can keep its routing information up to date
use ZooKeeper to track partition assignment / for cluster management

gossip protocol
massively parallel processing (MPP)


